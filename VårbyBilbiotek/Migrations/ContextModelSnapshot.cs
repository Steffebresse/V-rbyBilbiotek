// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VårbyBilbiotek.Data;

#nullable disable

namespace VårbyBilbiotek.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutorBook", b =>
                {
                    b.Property<int>("AutorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AutorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AutorBook");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Autors");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<Guid>("Isbn")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LoanCardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Loaned")
                        .HasColumnType("bit")
                        .HasColumnName("Loaned");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoanCardId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.LoanCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoanC");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DayBookWasReturned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("loanCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("loanCardId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AutorBook", b =>
                {
                    b.HasOne("VårbyBilbiotek.Models.Autor", null)
                        .WithMany()
                        .HasForeignKey("AutorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VårbyBilbiotek.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Book", b =>
                {
                    b.HasOne("VårbyBilbiotek.Models.LoanCard", "LoanCard")
                        .WithMany("Books")
                        .HasForeignKey("LoanCardId");

                    b.Navigation("LoanCard");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Log", b =>
                {
                    b.HasOne("VårbyBilbiotek.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.Person", b =>
                {
                    b.HasOne("VårbyBilbiotek.Models.LoanCard", "loanCard")
                        .WithMany()
                        .HasForeignKey("loanCardId");

                    b.Navigation("loanCard");
                });

            modelBuilder.Entity("VårbyBilbiotek.Models.LoanCard", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
